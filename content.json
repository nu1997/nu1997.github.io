{"pages":[{"title":"Home","text":"","link":"/Home/index.html"},{"title":"about","text":"","link":"/about/index.html"},{"title":"all-tags","text":"","link":"/all-tags/index.html"},{"title":"all-categories","text":"","link":"/all-categories/index.html"}],"posts":[{"title":"Mac OS에서 JAVA Setup 하기","text":"개발환경운영체제: Mac OS Catalina (Version 10.15.7) 터미널 프로필: zshrc 1. JAVA 설치JDK 8Oracle 홈페이지에서 다운받아 설치 https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html JDK 11내용참고출처: https://llighter.github.io/install-java-on-mac/ 1-1. HomebrewJDK 11은 Homebrew로 설치할 것이므로 버전이 최신인지 확인하고 업데이트 (+ 필요시 업그레이드) 해준다.1brew update 1brew upgrade Open JDK를 조회할 수 있도록 추가한다.1brew tap adoptopenjdk/openjdk Oracle JDK와 OpenJDK의 차이점 Oracle JDK는 상용(유료)이지만, OpenJDK는 오픈소스기반(무료)입니다. Oracle JDK의 라이선스는 Oracle BCL(Binary Code License) Agreement이지만, OpenJDK의 라이선스는 Oracle GPL v2입니다. Oracle JDK는 LTS(장기 지원) 업데이트 지원을 받을 수 있지만, OpenJDK는 LTS 없이 6개월마다 새로운 버전이 배포됩니다. Oracle JDK는 Oracle이 인수한 Sun Microsystems 플러그인을 제공하지만, OpenJDK는 제공하지 않습니다. Oracle JDK는 OpenJDK 보다 CPU 사용량과 메모리 사용량이 적고, 응답시간이 높습니다. 출처 : https://lindarex.github.io/concepts/difference-between-oraclejdk-openjdk 설치 가능한 JDK 찾기1brew search jdk 123456789101112131415161718192021222324// 2021.7 현재 조회되는 Open JDK ~/ brew search jdk==&gt; Formulaeopenjdk ✔ openjdk@11 openjdk@8 jd mdk cdk==&gt; Casksadoptopenjdk adoptopenjdk12-openj9-large adoptopenjdk15-openj9-largeadoptopenjdk-jre adoptopenjdk13 adoptopenjdk16adoptopenjdk-openj9 adoptopenjdk13-jre adoptopenjdk16-jreadoptopenjdk-openj9-jre adoptopenjdk13-openj9 adoptopenjdk16-openj9adoptopenjdk-openj9-jre-large adoptopenjdk13-openj9-jre adoptopenjdk16-openj9-jreadoptopenjdk-openj9-large adoptopenjdk13-openj9-jre-large adoptopenjdk8adoptopenjdk10 adoptopenjdk13-openj9-large adoptopenjdk8-jreadoptopenjdk11 ✔ adoptopenjdk14 adoptopenjdk8-openj9adoptopenjdk11-jre adoptopenjdk14-jre adoptopenjdk8-openj9-jreadoptopenjdk11-openj9 adoptopenjdk14-openj9 adoptopenjdk8-openj9-jre-largeadoptopenjdk11-openj9-jre adoptopenjdk14-openj9-jre adoptopenjdk8-openj9-largeadoptopenjdk11-openj9-jre-large adoptopenjdk14-openj9-jre-large adoptopenjdk9adoptopenjdk11-openj9-large adoptopenjdk14-openj9-large jdk-mission-controladoptopenjdk12 adoptopenjdk15 microsoft-openjdkadoptopenjdk12-jre adoptopenjdk15-jre oracle-jdkadoptopenjdk12-openj9 adoptopenjdk15-openj9 oracle-jdk-javadocadoptopenjdk12-openj9-jre adoptopenjdk15-openj9-jre sapmachine-jdkadoptopenjdk12-openj9-jre-large adoptopenjdk15-openj9-jre-large 설치1brew install --cask adoptopenjdk11 1-2. 설치 후 확인1/usr/libexec/java_home -V 123456// example ~/ /usr/libexec/java_home -VMatching Java Virtual Machines (2): 11.0.11, x86_64: &quot;AdoptOpenJDK 11&quot; /Library/Java/JavaVirtualMachines/adoptopenjdk-11.jdk/Contents/Home 자바 버전 확인하기12java -version (JDK 8)java --version (JDK 11) 2. JAVA 버전 관리이 포스트의 핵심이 되는 버전 관리에 대한 내용이다.1 ~/ code . VScode를 주로 쓰기에 최상위폴더에서 VScode를 열어 .zshrc 파일을 수정한다. 맨 하단(선택)에 이 코드를 붙여넣기 한다.123456789# Java Pathsexport JAVA_HOME_8=$(/usr/libexec/java_home -v 1.8)# export JAVA_HOME_8=/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Homeexport JAVA_HOME_11=$(/usr/libexec/java_home -v 11)# Java 8export JAVA_HOME=$JAVA_HOME_8# Java 11# 11버전을 사용하고자 하는 경우 아래 주석(#)을 해제하고 위에 8버전을 주석처리 하면된다.# export JAVA_HOME=$JAVA_HOME_11 ♦️ 주의: JDK8은 버전 v-8이 아닌 v- 1.8이다.변경된 프로필을 적용해준다.1source ~/.zshrc 끝","link":"/2021/07/07/Mac-OS%EC%97%90%EC%84%9C-JAVA-Setup-%ED%95%98%EA%B8%B0/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2021/06/24/hello-world/"},{"title":"Mac OS에서 JAVA Setup 하기","text":"개발환경운영체제: Mac OS Catalina (Version 10.15.7) 터미널 프로필: zshrc 1. JAVA 설치JDK 8Oracle 홈페이지에서 다운받아 설치 https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html JDK 11내용참고출처: https://llighter.github.io/install-java-on-mac/ 1-1. HomebrewJDK 11은 Homebrew로 설치할 것이므로 버전이 최신인지 확인하고 업데이트 (+ 필요시 업그레이드) 해준다.1brew update 1brew upgrade Open JDK를 조회할 수 있도록 추가한다.1brew tap adoptopenjdk/openjdk Oracle JDK와 OpenJDK의 차이점 Oracle JDK는 상용(유료)이지만, OpenJDK는 오픈소스기반(무료)입니다. Oracle JDK의 라이선스는 Oracle BCL(Binary Code License) Agreement이지만, OpenJDK의 라이선스는 Oracle GPL v2입니다. Oracle JDK는 LTS(장기 지원) 업데이트 지원을 받을 수 있지만, OpenJDK는 LTS 없이 6개월마다 새로운 버전이 배포됩니다. Oracle JDK는 Oracle이 인수한 Sun Microsystems 플러그인을 제공하지만, OpenJDK는 제공하지 않습니다. Oracle JDK는 OpenJDK 보다 CPU 사용량과 메모리 사용량이 적고, 응답시간이 높습니다. 출처 : https://lindarex.github.io/concepts/difference-between-oraclejdk-openjdk 설치 가능한 JDK 찾기1brew search jdk 123456789101112131415161718192021222324// 2021.7 현재 조회되는 Open JDK ~/ brew search jdk==&gt; Formulaeopenjdk ✔ openjdk@11 openjdk@8 jd mdk cdk==&gt; Casksadoptopenjdk adoptopenjdk12-openj9-large adoptopenjdk15-openj9-largeadoptopenjdk-jre adoptopenjdk13 adoptopenjdk16adoptopenjdk-openj9 adoptopenjdk13-jre adoptopenjdk16-jreadoptopenjdk-openj9-jre adoptopenjdk13-openj9 adoptopenjdk16-openj9adoptopenjdk-openj9-jre-large adoptopenjdk13-openj9-jre adoptopenjdk16-openj9-jreadoptopenjdk-openj9-large adoptopenjdk13-openj9-jre-large adoptopenjdk8adoptopenjdk10 adoptopenjdk13-openj9-large adoptopenjdk8-jreadoptopenjdk11 ✔ adoptopenjdk14 adoptopenjdk8-openj9adoptopenjdk11-jre adoptopenjdk14-jre adoptopenjdk8-openj9-jreadoptopenjdk11-openj9 adoptopenjdk14-openj9 adoptopenjdk8-openj9-jre-largeadoptopenjdk11-openj9-jre adoptopenjdk14-openj9-jre adoptopenjdk8-openj9-largeadoptopenjdk11-openj9-jre-large adoptopenjdk14-openj9-jre-large adoptopenjdk9adoptopenjdk11-openj9-large adoptopenjdk14-openj9-large jdk-mission-controladoptopenjdk12 adoptopenjdk15 microsoft-openjdkadoptopenjdk12-jre adoptopenjdk15-jre oracle-jdkadoptopenjdk12-openj9 adoptopenjdk15-openj9 oracle-jdk-javadocadoptopenjdk12-openj9-jre adoptopenjdk15-openj9-jre sapmachine-jdkadoptopenjdk12-openj9-jre-large adoptopenjdk15-openj9-jre-large 설치1brew install --cask adoptopenjdk11 1-2. 설치 후 확인1/usr/libexec/java_home -V 123456// example ~/ /usr/libexec/java_home -VMatching Java Virtual Machines (2): 11.0.11, x86_64: &quot;AdoptOpenJDK 11&quot; /Library/Java/JavaVirtualMachines/adoptopenjdk-11.jdk/Contents/Home 자바 버전 확인하기12java -version (JDK 8)java --version (JDK 11) 2. JAVA 버전 관리이 포스트의 핵심이 되는 버전 관리에 대한 내용이다.1 ~/ code . VScode를 주로 쓰기에 최상위폴더에서 VScode를 열어 .zshrc 파일을 수정한다. 맨 하단(선택)에 이 코드를 붙여넣기 한다.123456789# Java Pathsexport JAVA_HOME_8=$(/usr/libexec/java_home -v 1.8)# export JAVA_HOME_8=/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Homeexport JAVA_HOME_11=$(/usr/libexec/java_home -v 11)# Java 8export JAVA_HOME=$JAVA_HOME_8# Java 11# 11버전을 사용하고자 하는 경우 아래 주석(#)을 해제하고 위에 8버전을 주석처리 하면된다.# export JAVA_HOME=$JAVA_HOME_11 ♦️ 주의: JDK8은 버전 v-8이 아닌 v- 1.8이다.변경된 프로필을 적용해준다.1source ~/.zshrc 끝","link":"/2021/07/07/Mac-OS%E1%84%8B%E1%85%A6%E1%84%89%E1%85%A5-JAVA-Setup-%E1%84%92%E1%85%A1%E1%84%80%E1%85%B5/"},{"title":"java 언어 개요","text":"Java 언어 개요자바 언어의 탄생 배경 가정용 전자기기에서 사용되는 작은 컴퓨터 언어로 출발 다른 CPU가 선택될 수 있기 때문에 특정 디바이스에 종속되지 않아야 함 (이게 무슨 말이지…) 가상머신에서 동작하는 중간코드를 생성하여 이식성이 높은 디자인 초기 자바 언어는 절차지향 + 객체지향 C++ 기반 &gt;&gt;&gt; 한계에 봉착 이후 Oak(객체지향) 새롭게 고안 → 이름 중복으로 Java로 변경 WWW와 Mosaic → Java를 기반으로 한 웹 브라우저 (HotJava) 제작 Applet 이라는 자바의 기능을 보여주기 위해 브라우저가 중간코드(Bytecode)를 해석할 수 있도록 만듦 Netscape사의 자바 지원 → 급격한 확장 자바 언어의 특징 단순(Simple) C(절차지향)와 C++(절차지향 + 객체지향)의 복잡한 기능(전위처리, 포인터 사용, 다중 상속, 구조체, goto문 사용, 연산자 중복 기능 등)을 제외하고 가비지 컬렉터에 의해 자동 메모리 관리. → 작고 간편 객체지향(Object-Oriented) C++을 기초로 만들어졌기 때문에 언어라는 객체를 사용해서 프로그램을 작성 높은 재사용성(reusability) → 수많은 클래스 라이브러리를 API로 제공함 분산 처리(Distributed) 인터넷 또는 네트워크와 같은 분산 환경에서 TCP/IP 등의 프로토콜을 통해 효율적으로 실행할 수 있도록 설계됨 TCP/IP 네트워크 기능 내장 HTTP, FTP 같은 프로토콜 쉽게 사용할 수 있도록 라이브러리 제공 서로 다른 컴퓨터 상의 객체도 원격으로 호출하여 실행할 수 있는 원격 메서드 호출과 관련된 RMI(Remote Method Invocation)기능의 라이브러리 제공 인터프리터(Interpreter) 실행하는 작동 원리에 따라 일반적으로 인터프리터 / 컴파일 언어로 나뉨 자바 프로그램의 실행 과정은? 컴파일 언어임과 동시에 인터프리터 언어 견고(Robust) 다양한 플랫폼(또는 컴퓨터) 상에서 실행되기 위해 에러 요소를 제거하거나 자동으로 해결 포인터를 사용하지 않음 엄격한 데이터 타입 검사 실행 시간에 발생하는 에러 처리 가비지 컬렉션 수행 안전(Secure) 자바는 분산 네트워크 환경에서도 실행되므로 안전성이 매우 중요 컴파일 시 엄격하게 데이터 타입 검사, 비정상적인 상황을 미리 방지 플랫폼 독립(Architecture Neutral) 운영체제나 CPU 등 하드웨어 사양에 관계없이 실행될 수 있음. 높은 성능(High Performance) 가비지 컬렉션 기능 한번 메모리가 할당된 객체의 상태를 끝까지 추적하여 더이상 참조되지 않으면 자동으로 할당된 메모리 삭제 → 높은 성능 유지 멀티스레드(Multithread) 스레드: 독자적으로 수행하는 하나의 작은 프로그램 멀티 스레드: 하나의 CPU가 여러 개의 프로그램을 동시에 수행하도록 함. → 수행 속도 빠름 동적(Dynamic) 자바 언어는 변화되는 환경에 잘 적응되도록 설계됨 기존의 프로그램에 영향을 주지 않고, 라이브러리에 새로운 메서드나 속성을 추가할 수 있음 프로그램과 프로그램에서 사용되는 라이브러리의 연결을 실행 시간에 수행 → 라이브러리의 변화를 곧바로 적용 가능 자바 플랫폼 &lt;일반적인 플랫폼&gt; 컴퓨터 하드웨어 + 하드웨어 제어 운영체제 &lt;자바 플랫폼&gt; 소프트웨어만으로 구성됨 JAVA SE 가장 기본이 되는 에디션, 대부분의 패키지 포함 JAVA EE 현업에서 사용되는 API들이 집약됨 JAVA ME 모바일 기기에서 사용되는 API 스마트폰이 자체적인 OS를 가지고 있기 때문에 거의 사장됨 어플리케이션 → 운영체제를 통해 하고자 하는 일을 전달 → 하드웨어 플랫폼 JAVA 프로그램 → 자바 가상 머신(JAVA API) → 다양한 하드웨어 플랫폼 JAVA 가상 머신 통상의 프로그램: Windows / Linux용으로 나눠 배포 자바는 자바 언어로 쓰여진 어플리케이션을 실행시키는 기능을 함 자바로 쓰여진 어플리케이션과 특정 운영체제 중간에 존재하여 서로를 분리함으로써 어플리케이션이 운영체제에 영향을 받지 않고 동작할 수 있는 환경을 제공 JVM은 운영체제와 직접적으로 통신을 해야 하므로 운영체제에 맞는 JVM을 설치해주어야 함 자바 API 프로그래머가 필요로 하는 기본적인 클래스를 거대한 라이브러리로 미리 만들어서 제공하는 것 미리 제공되는 클래스를 표준 클래스라고 함 작고 단순한 구조이지만 API를 통해 많은 기능을 제공함 관련된 기능의 클래스를 묶어 패키지 형태로 제공 → 일종의 폴더, 디렉토리 개념으로 이해해야 함","link":"/2021/07/10/java-%EC%96%B8%EC%96%B4-%EA%B0%9C%EC%9A%94/"}],"tags":[],"categories":[{"name":"java","slug":"java","link":"/categories/java/"}]}